// Copyright 2016 Factom Foundation
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

package wallet

import (
	"fmt"
	"sync"

	"github.com/FactomProject/factom"
	"github.com/FactomProject/factomd/common/factoid"
	"github.com/FactomProject/factomd/common/primitives/random"
	ed "github.com/FactomProject/ed25519"
)

// Wallet is a connection to a Factom Wallet Database
type Wallet struct {
	*WalletDatabaseOverlay
	txlock       sync.Mutex
	transactions map[string]*factoid.Transaction
	txdb         *TXDatabaseOverlay
}

func (w *Wallet) InitWallet() error {
	dbSeed, err := w.GetOrCreateDBSeed()
	if err != nil {
		return err
	}
	if dbSeed == nil {
		return fmt.Errorf("dbSeed not present in DB")
	}
	return nil
}

func NewOrOpenLevelDBWallet(path string) (*Wallet, error) {
	w := new(Wallet)
	w.transactions = make(map[string]*factoid.Transaction)
	db, err := NewLevelDB(path)
	if err != nil {
		return nil, err
	}
	w.WalletDatabaseOverlay = db
	err = w.InitWallet()
	if err != nil {
		return nil, err
	}
	return w, nil
}

func NewOrOpenBoltDBWallet(path string) (*Wallet, error) {
	w := new(Wallet)
	w.transactions = make(map[string]*factoid.Transaction)
	db, err := NewBoltDB(path)
	if err != nil {
		return nil, err
	}
	w.WalletDatabaseOverlay = db
	err = w.InitWallet()
	if err != nil {
		return nil, err
	}
	return w, nil
}

func NewMapDBWallet() (*Wallet, error) {
	w := new(Wallet)
	w.transactions = make(map[string]*factoid.Transaction)
	db := NewMapDB()
	w.WalletDatabaseOverlay = db
	err := w.InitWallet()
	if err != nil {
		return nil, err
	}
	return w, nil
}

func NewEncryptedBoltDBWallet(path, password string) (*Wallet, error) {
	w := new(Wallet)
	w.transactions = make(map[string]*factoid.Transaction)
	db, err := NewEncryptedBoltDB(path, password)
	if err != nil {
		return nil, err
	}

	w.WalletDatabaseOverlay = db
	err = w.InitWallet()
	if err != nil {
		return nil, err
	}
	return w, nil
}

// Close closes a Factom Wallet Database
func (w *Wallet) Close() error {
	return w.DBO.Close()
}

// AddTXDB allows the wallet api to read from a local transaction cashe.
func (w *Wallet) AddTXDB(t *TXDatabaseOverlay) {
	w.txdb = t
}

func (w *Wallet) TXDB() *TXDatabaseOverlay {
	return w.txdb
}

// GenerateECAddress creates and stores a new Entry Credit Address in the
// Wallet. The address can be reproduced in the future using the Wallet Seed.
func (w *Wallet) GenerateECAddress() (*factom.ECAddress, error) {
	return w.GetNextECAddress()
}

// GenerateFCTAddress creates and stores a new Factoid Address in the Wallet.
// The address can be reproduced in the future using the Wallet Seed.
func (w *Wallet) GenerateFCTAddress() (*factom.FactoidAddress, error) {
	return w.GetNextFCTAddress()
}

// GenerateIdentityKey creates and stores a new Identity Key in the Wallet.
// TODO: allow the address to be reproduced in the future using the wallet seed
func (w *Wallet) GenerateIdentityKey() (*factom.IdentityKey, error) {
	randomSecret := random.RandByteSliceOfLen(32)

	k := factom.NewIdentityKey()
	copy(k.Sec[:32], randomSecret[:])
	k.Pub = ed.GetPublicKey(k.Sec)

	err := w.InsertIdentityKey(k)
	if err != nil {
		return nil, err
	}
	return k, nil
}

// GetAllAddresses retrieves all Entry Credit and Factoid Addresses from the
// Wallet Database.
func (w *Wallet) GetAllAddresses() ([]*factom.FactoidAddress, []*factom.ECAddress, error) {
	fcs, err := w.GetAllFCTAddresses()
	if err != nil {
		return nil, nil, err
	}
	ecs, err := w.GetAllECAddresses()
	if err != nil {
		return nil, nil, err
	}

	return fcs, ecs, nil
}

// GetSeed returns the string representaion of the Wallet Seed. The Wallet Seed
// can be used to regenerate the Factoid and Entry Credit Addresses previously
// generated by the wallet. Note that Addresses that are imported into the
// Wallet cannot be regenerated using the Wallet Seed.
func (w *Wallet) GetSeed() (string, error) {
	seed, err := w.GetDBSeed()
	if err != nil {
		return "", err
	}

	return seed.MnemonicSeed, nil
}

func (w *Wallet) GetVersion() string {
	return WalletVersion
}

func (w *Wallet) GetApiVersion() string {
	return ApiVersion
}
